{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nlet data = {\n  data: []\n};\n\nconst datareducer = function () {\n  let olddata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : data;\n  let newdata = arguments.length > 1 ? arguments[1] : undefined;\n  olddata = {\n    data: [...olddata.data]\n  };\n\n  switch (newdata.type) {\n    case 'ADD_DATA':\n      // return {...olddata, data:[...newdata.payload]}\n      olddata.data.push(newdata.payload);\n      break;\n\n    case 'DEL_ROW':\n      return { ...olddata,\n        data: [...newdata.payload]\n      };\n      break;\n\n    case 'EDIT_ROW':\n      return { ...olddata,\n        data: [...newdata.payload]\n      };\n      break;\n\n    default:\n      break;\n  }\n\n  return olddata;\n};\n\nlet combine = combineReducers({\n  datareducer\n});\nlet store = createStore(combine);\nexport default store;","map":{"version":3,"sources":["/home/mrbilal/Projects/mern-todo/src/Redux/store.js"],"names":["createStore","combineReducers","data","datareducer","olddata","newdata","type","push","payload","combine","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AAEA,IAAIC,IAAI,GAAC;AACLA,EAAAA,IAAI,EAAC;AADA,CAAT;;AAGA,MAAMC,WAAW,GAAG,YAAyB;AAAA,MAAxBC,OAAwB,uEAAhBF,IAAgB;AAAA,MAAVG,OAAU;AACzCD,EAAAA,OAAO,GAAG;AAACF,IAAAA,IAAI,EAAG,CAAC,GAAGE,OAAO,CAACF,IAAZ;AAAR,GAAV;;AACA,UAAOG,OAAO,CAACC,IAAf;AACI,SAAK,UAAL;AACI;AACAF,MAAAA,OAAO,CAACF,IAAR,CAAaK,IAAb,CAAkBF,OAAO,CAACG,OAA1B;AACA;;AACJ,SAAK,SAAL;AACI,aAAO,EAAC,GAAGJ,OAAJ;AAAaF,QAAAA,IAAI,EAAC,CAAC,GAAGG,OAAO,CAACG,OAAZ;AAAlB,OAAP;AACA;;AACJ,SAAK,UAAL;AACI,aAAO,EAAC,GAAGJ,OAAJ;AAAaF,QAAAA,IAAI,EAAC,CAAC,GAAGG,OAAO,CAACG,OAAZ;AAAlB,OAAP;AACA;;AACJ;AACI;AAZR;;AAcA,SAAOJ,OAAP;AACH,CAjBD;;AAwBA,IAAIK,OAAO,GAAGR,eAAe,CAAC;AAACE,EAAAA;AAAD,CAAD,CAA7B;AACA,IAAIO,KAAK,GAAGV,WAAW,CAACS,OAAD,CAAvB;AAEA,eAAeC,KAAf","sourcesContent":["import {createStore, combineReducers} from 'redux'\n\nlet data={\n    data:[]\n}\nconst datareducer = (olddata=data, newdata)=>{\n    olddata = {data : [...olddata.data] }\n    switch(newdata.type){\n        case 'ADD_DATA':\n            // return {...olddata, data:[...newdata.payload]}\n            olddata.data.push(newdata.payload)\n            break;\n        case 'DEL_ROW':\n            return {...olddata, data:[...newdata.payload]}\n            break;\n        case 'EDIT_ROW':\n            return {...olddata, data:[...newdata.payload]}\n            break;\n        default:\n            break;\n    }\n    return olddata\n}\n\n\n\n\n\n\nlet combine = combineReducers({datareducer})\nlet store = createStore(combine)\n\nexport default store;"]},"metadata":{},"sourceType":"module"}