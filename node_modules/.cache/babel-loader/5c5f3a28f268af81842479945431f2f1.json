{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nlet userdata = {\n  loginuser: {}\n};\n\nfunction userReducer() {\n  let olddata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userdata;\n  let newdata = arguments.length > 1 ? arguments[1] : undefined;\n  olddata = {\n    users: [...olddata.users],\n    loginuser: { ...olddata.loginuser\n    }\n  };\n\n  switch (newdata.type) {\n    case 'USER_LOGIN':\n      olddata.loginuser = newdata.payload;\n      break;\n\n    case 'LOGOUT':\n      olddata.loginuser = {};\n      localStorage.removeItem('token');\n      break;\n\n    default:\n      break;\n  }\n\n  return olddata;\n}\n\nlet data = {\n  textData: []\n};\n\nconst datareducer = function () {\n  let olddata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : data;\n  let newdata = arguments.length > 1 ? arguments[1] : undefined;\n  olddata = {\n    textData: [...olddata.textData]\n  };\n\n  switch (newdata.type) {\n    case 'ADD_DATA':\n      olddata.textData.push(newdata.payload);\n      break;\n\n    case 'DEL_ROW':\n      return { ...olddata,\n        textData: [...newdata.payload]\n      };\n      break;\n\n    case 'EDIT_ROW':\n      return { ...olddata,\n        textData: [...newdata.payload]\n      };\n      break;\n\n    default:\n      break;\n  }\n\n  return olddata;\n};\n\nlet combine = combineReducers({\n  userReducer,\n  datareducer\n});\nlet store = createStore(combine);\nexport default store;","map":{"version":3,"sources":["/home/mrbilal/Bilal Gamica - TopSol/Projects/mern-todo/src/Redux/store.js"],"names":["createStore","combineReducers","userdata","loginuser","userReducer","olddata","newdata","users","type","payload","localStorage","removeItem","data","textData","datareducer","push","combine","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AAGA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,SAAS,EAAE;AADA,CAAf;;AAIA,SAASC,WAAT,GAAiD;AAAA,MAA5BC,OAA4B,uEAAlBH,QAAkB;AAAA,MAARI,OAAQ;AAC7CD,EAAAA,OAAO,GAAG;AAACE,IAAAA,KAAK,EAAE,CAAC,GAAGF,OAAO,CAACE,KAAZ,CAAR;AAA6BJ,IAAAA,SAAS,EAAE,EAAC,GAAGE,OAAO,CAACF;AAAZ;AAAxC,GAAV;;AAEA,UAAQG,OAAO,CAACE,IAAhB;AAEI,SAAK,YAAL;AACIH,MAAAA,OAAO,CAACF,SAAR,GAAoBG,OAAO,CAACG,OAA5B;AACA;;AAEJ,SAAK,QAAL;AACIJ,MAAAA,OAAO,CAACF,SAAR,GAAoB,EAApB;AACAO,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACA;;AAEJ;AACI;AAZR;;AAeA,SAAON,OAAP;AACH;;AAED,IAAIO,IAAI,GAAC;AACLC,EAAAA,QAAQ,EAAC;AADJ,CAAT;;AAGA,MAAMC,WAAW,GAAG,YAAyB;AAAA,MAAxBT,OAAwB,uEAAhBO,IAAgB;AAAA,MAAVN,OAAU;AACzCD,EAAAA,OAAO,GAAG;AAACQ,IAAAA,QAAQ,EAAG,CAAC,GAAGR,OAAO,CAACQ,QAAZ;AAAZ,GAAV;;AACA,UAAOP,OAAO,CAACE,IAAf;AACI,SAAK,UAAL;AACIH,MAAAA,OAAO,CAACQ,QAAR,CAAiBE,IAAjB,CAAsBT,OAAO,CAACG,OAA9B;AACA;;AACJ,SAAK,SAAL;AACI,aAAO,EAAC,GAAGJ,OAAJ;AAAaQ,QAAAA,QAAQ,EAAC,CAAC,GAAGP,OAAO,CAACG,OAAZ;AAAtB,OAAP;AACA;;AACJ,SAAK,UAAL;AACI,aAAO,EAAC,GAAGJ,OAAJ;AAAaQ,QAAAA,QAAQ,EAAC,CAAC,GAAGP,OAAO,CAACG,OAAZ;AAAtB,OAAP;AACA;;AACJ;AACI;AAXR;;AAaA,SAAOJ,OAAP;AACH,CAhBD;;AAuBA,IAAIW,OAAO,GAAGf,eAAe,CAAC;AAACG,EAAAA,WAAD;AAAcU,EAAAA;AAAd,CAAD,CAA7B;AACA,IAAIG,KAAK,GAAGjB,WAAW,CAACgB,OAAD,CAAvB;AAEA,eAAeC,KAAf","sourcesContent":["import {createStore, combineReducers} from 'redux'\n\n\nlet userdata = {\n    loginuser: {}\n}\n\nfunction userReducer(olddata = userdata, newdata){\n    olddata = {users: [...olddata.users] , loginuser: {...olddata.loginuser}}\n\n    switch (newdata.type) {\n\n        case 'USER_LOGIN' :\n            olddata.loginuser = newdata.payload\n            break;\n    \n        case 'LOGOUT' :\n            olddata.loginuser = {}\n            localStorage.removeItem('token')\n            break;\n    \n        default:\n            break;\n    }\n\n    return olddata\n}\n\nlet data={\n    textData:[]\n}\nconst datareducer = (olddata=data, newdata)=>{\n    olddata = {textData : [...olddata.textData] }\n    switch(newdata.type){\n        case 'ADD_DATA':\n            olddata.textData.push(newdata.payload)\n            break;\n        case 'DEL_ROW':\n            return {...olddata, textData:[...newdata.payload]}\n            break;\n        case 'EDIT_ROW':\n            return {...olddata, textData:[...newdata.payload]}\n            break;\n        default:\n            break;\n    }\n    return olddata\n}\n\n\n\n\n\n\nlet combine = combineReducers({userReducer, datareducer})\nlet store = createStore(combine)\n\nexport default store;\n\n"]},"metadata":{},"sourceType":"module"}