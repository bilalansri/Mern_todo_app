{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport store from '../../Redux/store';\nimport { useState } from 'react';\nimport axios from 'axios';\nexport default _s((addData, editData, setEditCheck, storedata, setEdit) => {\n  _s();\n\n  const [id, setId] = useState('');\n\n  const addform = async e => {\n    e.preventDefault();\n\n    if (addData == '') {\n      return;\n    } // store.dispatch({\n    //     type: 'ADD_DATA',\n    //     payload: addData \n    // })\n\n\n    try {\n      await axios.post('/add', addData);\n    } catch (error) {\n      alert('DataBase Not Available');\n    }\n  };\n\n  const editform = e => {\n    e.preventDefault();\n\n    if (editData == '') {\n      return;\n    }\n\n    storedata[id] = editData;\n    store.dispatch({\n      type: 'EDIT_ROW',\n      payload: storedata\n    });\n    setEditCheck(false);\n  };\n\n  const editrow = (evt, indx) => {\n    setEditCheck(true);\n    const a = storedata[indx];\n    setEdit(a);\n    setId(indx);\n  };\n\n  const delrow = (evt, indx) => {\n    storedata.splice(indx, 1);\n    store.dispatch({\n      type: 'DEL_ROW',\n      payload: storedata\n    });\n  };\n\n  return {\n    addform,\n    editform,\n    editrow,\n    delrow\n  };\n}, \"HQhLVNjveXBilLE1Zdd8jTOIPME=\");","map":{"version":3,"sources":["/home/mrbilal/Bilal Gamica - TopSol/Projects/mern-todo/src/Pages/Hooks/useHome.js"],"names":["store","useState","axios","addData","editData","setEditCheck","storedata","setEdit","id","setId","addform","e","preventDefault","post","error","alert","editform","dispatch","type","payload","editrow","evt","indx","a","delrow","splice"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,kBAAe,CAACC,OAAD,EAAUC,QAAV,EAAoBC,YAApB,EAAkCC,SAAlC,EAA6CC,OAA7C,KAAuD;AAAA;;AAElE,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,QAAQ,CAAC,EAAD,CAA5B;;AAEA,QAAMS,OAAO,GAAG,MAAOC,CAAP,IAAW;AAEvBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAGT,OAAO,IAAI,EAAd,EAAiB;AACb;AACH,KANsB,CAQvB;AACA;AACA;AACA;;;AAEA,QAAI;AAEA,YAAMD,KAAK,CAACW,IAAN,CAAW,MAAX,EAAmBV,OAAnB,CAAN;AACH,KAHD,CAGE,OAAOW,KAAP,EAAc;AACZC,MAAAA,KAAK,CAAC,wBAAD,CAAL;AACH;AAEJ,GApBD;;AAuBA,QAAMC,QAAQ,GAAIL,CAAD,IAAK;AAElBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAGR,QAAQ,IAAI,EAAf,EAAkB;AACd;AACH;;AAEDE,IAAAA,SAAS,CAACE,EAAD,CAAT,GAAgBJ,QAAhB;AAEAJ,IAAAA,KAAK,CAACiB,QAAN,CAAe;AACXC,MAAAA,IAAI,EAAE,UADK;AAEXC,MAAAA,OAAO,EAAEb;AAFE,KAAf;AAKAD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GAjBD;;AAmBA,QAAMe,OAAO,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAa;AAEzBjB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMkB,CAAC,GAAGjB,SAAS,CAACgB,IAAD,CAAnB;AACAf,IAAAA,OAAO,CAACgB,CAAD,CAAP;AACAd,IAAAA,KAAK,CAACa,IAAD,CAAL;AACH,GAND;;AAQA,QAAME,MAAM,GAAG,CAACH,GAAD,EAAMC,IAAN,KAAa;AACxBhB,IAAAA,SAAS,CAACmB,MAAV,CAAiBH,IAAjB,EAAsB,CAAtB;AAEAtB,IAAAA,KAAK,CAACiB,QAAN,CAAe;AACXC,MAAAA,IAAI,EAAE,SADK;AAEXC,MAAAA,OAAO,EAAEb;AAFE,KAAf;AAIH,GAPD;;AAUA,SAAO;AACHI,IAAAA,OADG;AAEHM,IAAAA,QAFG;AAGHI,IAAAA,OAHG;AAIHI,IAAAA;AAJG,GAAP;AAOH,CAvED","sourcesContent":["import store from '../../Redux/store'\nimport { useState } from 'react'\nimport axios from 'axios'\n\n\n\nexport default (addData, editData, setEditCheck, storedata, setEdit)=>{\n    \n    const [id, setId] = useState('')\n\n    const addform = async (e)=>{\n\n        e.preventDefault()\n\n        if(addData == ''){\n            return\n        }\n\n        // store.dispatch({\n        //     type: 'ADD_DATA',\n        //     payload: addData \n        // })\n\n        try {\n        \n            await axios.post('/add', addData)\n        } catch (error) {\n            alert('DataBase Not Available')\n        }\n        \n    }\n\n\n    const editform = (e)=>{\n\n        e.preventDefault()\n\n        if(editData == ''){\n            return\n        }\n\n        storedata[id] = editData\n\n        store.dispatch({\n            type: 'EDIT_ROW',\n            payload: storedata\n        })\n\n        setEditCheck(false)\n        \n    }\n\n    const editrow = (evt, indx)=>{\n\n        setEditCheck(true)\n        const a = storedata[indx]\n        setEdit(a)\n        setId(indx)\n    }\n\n    const delrow = (evt, indx)=>{\n        storedata.splice(indx,1)\n\n        store.dispatch({\n            type: 'DEL_ROW',\n            payload: storedata\n        })\n    }\n\n\n    return {\n        addform,\n        editform,\n        editrow,\n        delrow\n\n    }\n}"]},"metadata":{},"sourceType":"module"}